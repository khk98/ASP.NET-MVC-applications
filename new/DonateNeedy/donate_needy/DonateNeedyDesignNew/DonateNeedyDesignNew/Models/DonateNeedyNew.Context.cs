//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DonateNeedyDesignNew.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DonateNeedyNewEntities : DbContext
    {
        public DonateNeedyNewEntities()
            : base("name=DonateNeedyNewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAuthentication> tblAuthentications { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblCharity> tblCharities { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblContactU> tblContactUs { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblDonation> tblDonations { get; set; }
        public virtual DbSet<tblDonationType> tblDonationTypes { get; set; }
        public virtual DbSet<tblEmailTemplateSave> tblEmailTemplateSaves { get; set; }
        public virtual DbSet<tblErrorlog> tblErrorlogs { get; set; }
        public virtual DbSet<tblEvent> tblEvents { get; set; }
        public virtual DbSet<tblFeedback> tblFeedbacks { get; set; }
        public virtual DbSet<tblFeedbackReason> tblFeedbackReasons { get; set; }
        public virtual DbSet<tblRegistration> tblRegistrations { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblStatu> tblStatus { get; set; }
        public virtual DbSet<tblSubscribe> tblSubscribes { get; set; }
        public virtual DbSet<tblTestimonial> tblTestimonials { get; set; }
        public virtual DbSet<tblTitle> tblTitles { get; set; }
        public virtual DbSet<tblUserType> tblUserTypes { get; set; }
    
        public virtual ObjectResult<usp_ChangePassword_Result> usp_ChangePassword(string username, string oldPassword, string newPassword, Nullable<int> mode)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ChangePassword_Result>("usp_ChangePassword", usernameParameter, oldPasswordParameter, newPasswordParameter, modeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CheckCredentials(string emailID, string password, ObjectParameter outputCount)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("emailID", emailID) :
                new ObjectParameter("emailID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CheckCredentials", emailIDParameter, passwordParameter, outputCount);
        }
    
        public virtual int usp_checkFundRaisedCompletedOrNot(Nullable<int> fundRaisingID, Nullable<int> registrationID)
        {
            var fundRaisingIDParameter = fundRaisingID.HasValue ?
                new ObjectParameter("FundRaisingID", fundRaisingID) :
                new ObjectParameter("FundRaisingID", typeof(int));
    
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_checkFundRaisedCompletedOrNot", fundRaisingIDParameter, registrationIDParameter);
        }
    
        public virtual int usp_CRUDCloseSwitch(Nullable<int> eventID, Nullable<int> mode)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("eventID", eventID) :
                new ObjectParameter("eventID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CRUDCloseSwitch", eventIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_CRUDtblContactUs_Result> usp_CRUDtblContactUs(Nullable<int> contactUsID, string name, string emailID, string phoneNumber, string message, Nullable<int> registrationid, Nullable<int> mode)
        {
            var contactUsIDParameter = contactUsID.HasValue ?
                new ObjectParameter("contactUsID", contactUsID) :
                new ObjectParameter("contactUsID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("emailID", emailID) :
                new ObjectParameter("emailID", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var registrationidParameter = registrationid.HasValue ?
                new ObjectParameter("registrationid", registrationid) :
                new ObjectParameter("registrationid", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CRUDtblContactUs_Result>("usp_CRUDtblContactUs", contactUsIDParameter, nameParameter, emailIDParameter, phoneNumberParameter, messageParameter, registrationidParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_CRUDtblEvent_Result> usp_CRUDtblEvent(Nullable<int> eventID, Nullable<int> registrationID, string title, Nullable<int> categoryID, string description, string image, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> cityid, string venue, Nullable<bool> confirmed, string targetAmount, string collectedAmount, string reasonForRejecting, Nullable<bool> approval, Nullable<int> mode)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("eventID", eventID) :
                new ObjectParameter("eventID", typeof(int));
    
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var cityidParameter = cityid.HasValue ?
                new ObjectParameter("cityid", cityid) :
                new ObjectParameter("cityid", typeof(int));
    
            var venueParameter = venue != null ?
                new ObjectParameter("venue", venue) :
                new ObjectParameter("venue", typeof(string));
    
            var confirmedParameter = confirmed.HasValue ?
                new ObjectParameter("confirmed", confirmed) :
                new ObjectParameter("confirmed", typeof(bool));
    
            var targetAmountParameter = targetAmount != null ?
                new ObjectParameter("targetAmount", targetAmount) :
                new ObjectParameter("targetAmount", typeof(string));
    
            var collectedAmountParameter = collectedAmount != null ?
                new ObjectParameter("collectedAmount", collectedAmount) :
                new ObjectParameter("collectedAmount", typeof(string));
    
            var reasonForRejectingParameter = reasonForRejecting != null ?
                new ObjectParameter("reasonForRejecting", reasonForRejecting) :
                new ObjectParameter("reasonForRejecting", typeof(string));
    
            var approvalParameter = approval.HasValue ?
                new ObjectParameter("approval", approval) :
                new ObjectParameter("approval", typeof(bool));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CRUDtblEvent_Result>("usp_CRUDtblEvent", eventIDParameter, registrationIDParameter, titleParameter, categoryIDParameter, descriptionParameter, imageParameter, startDateParameter, endDateParameter, countryIDParameter, stateIDParameter, cityidParameter, venueParameter, confirmedParameter, targetAmountParameter, collectedAmountParameter, reasonForRejectingParameter, approvalParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_CRUDtblEventNew_Result> usp_CRUDtblEventNew(Nullable<int> registrationID, string title, Nullable<int> categoryID, string description, string image, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string venue, Nullable<bool> confirmed, string targetAmount, string collectedAmount, string reasonForRejecting, Nullable<bool> approval, string video, string benificiaryType, string organiserName, Nullable<int> eventID, string charityName, string charityIdentificationNumber, string charityPersonOfContact, string charityPhoneNumber, string charityEmailId, Nullable<int> charityCountryID, Nullable<int> charityStateID, Nullable<int> charityCityid, string charityAddress, Nullable<int> mode)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var venueParameter = venue != null ?
                new ObjectParameter("venue", venue) :
                new ObjectParameter("venue", typeof(string));
    
            var confirmedParameter = confirmed.HasValue ?
                new ObjectParameter("confirmed", confirmed) :
                new ObjectParameter("confirmed", typeof(bool));
    
            var targetAmountParameter = targetAmount != null ?
                new ObjectParameter("targetAmount", targetAmount) :
                new ObjectParameter("targetAmount", typeof(string));
    
            var collectedAmountParameter = collectedAmount != null ?
                new ObjectParameter("collectedAmount", collectedAmount) :
                new ObjectParameter("collectedAmount", typeof(string));
    
            var reasonForRejectingParameter = reasonForRejecting != null ?
                new ObjectParameter("reasonForRejecting", reasonForRejecting) :
                new ObjectParameter("reasonForRejecting", typeof(string));
    
            var approvalParameter = approval.HasValue ?
                new ObjectParameter("approval", approval) :
                new ObjectParameter("approval", typeof(bool));
    
            var videoParameter = video != null ?
                new ObjectParameter("video", video) :
                new ObjectParameter("video", typeof(string));
    
            var benificiaryTypeParameter = benificiaryType != null ?
                new ObjectParameter("benificiaryType", benificiaryType) :
                new ObjectParameter("benificiaryType", typeof(string));
    
            var organiserNameParameter = organiserName != null ?
                new ObjectParameter("organiserName", organiserName) :
                new ObjectParameter("organiserName", typeof(string));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var charityNameParameter = charityName != null ?
                new ObjectParameter("charityName", charityName) :
                new ObjectParameter("charityName", typeof(string));
    
            var charityIdentificationNumberParameter = charityIdentificationNumber != null ?
                new ObjectParameter("charityIdentificationNumber", charityIdentificationNumber) :
                new ObjectParameter("charityIdentificationNumber", typeof(string));
    
            var charityPersonOfContactParameter = charityPersonOfContact != null ?
                new ObjectParameter("charityPersonOfContact", charityPersonOfContact) :
                new ObjectParameter("charityPersonOfContact", typeof(string));
    
            var charityPhoneNumberParameter = charityPhoneNumber != null ?
                new ObjectParameter("charityPhoneNumber", charityPhoneNumber) :
                new ObjectParameter("charityPhoneNumber", typeof(string));
    
            var charityEmailIdParameter = charityEmailId != null ?
                new ObjectParameter("charityEmailId", charityEmailId) :
                new ObjectParameter("charityEmailId", typeof(string));
    
            var charityCountryIDParameter = charityCountryID.HasValue ?
                new ObjectParameter("charityCountryID", charityCountryID) :
                new ObjectParameter("charityCountryID", typeof(int));
    
            var charityStateIDParameter = charityStateID.HasValue ?
                new ObjectParameter("charityStateID", charityStateID) :
                new ObjectParameter("charityStateID", typeof(int));
    
            var charityCityidParameter = charityCityid.HasValue ?
                new ObjectParameter("charityCityid", charityCityid) :
                new ObjectParameter("charityCityid", typeof(int));
    
            var charityAddressParameter = charityAddress != null ?
                new ObjectParameter("charityAddress", charityAddress) :
                new ObjectParameter("charityAddress", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CRUDtblEventNew_Result>("usp_CRUDtblEventNew", registrationIDParameter, titleParameter, categoryIDParameter, descriptionParameter, imageParameter, startDateParameter, endDateParameter, venueParameter, confirmedParameter, targetAmountParameter, collectedAmountParameter, reasonForRejectingParameter, approvalParameter, videoParameter, benificiaryTypeParameter, organiserNameParameter, eventIDParameter, charityNameParameter, charityIdentificationNumberParameter, charityPersonOfContactParameter, charityPhoneNumberParameter, charityEmailIdParameter, charityCountryIDParameter, charityStateIDParameter, charityCityidParameter, charityAddressParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_CRUDtblRegistation_Result> usp_CRUDtblRegistation(Nullable<int> registrationID, Nullable<int> userTypeID, Nullable<int> countryID, Nullable<int> stateID, string firstName, string lastName, string emailID, string password, string address, Nullable<int> cityid, string pincode, string profilePicture, Nullable<bool> emailConfirmed, string phoneNumber, string userName, Nullable<int> userID, string middlename, Nullable<int> titleid, Nullable<int> mode)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("userTypeID", userTypeID) :
                new ObjectParameter("userTypeID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("emailID", emailID) :
                new ObjectParameter("emailID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityidParameter = cityid.HasValue ?
                new ObjectParameter("Cityid", cityid) :
                new ObjectParameter("Cityid", typeof(int));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("profilePicture", profilePicture) :
                new ObjectParameter("profilePicture", typeof(string));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("emailConfirmed", emailConfirmed) :
                new ObjectParameter("emailConfirmed", typeof(bool));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var titleidParameter = titleid.HasValue ?
                new ObjectParameter("titleid", titleid) :
                new ObjectParameter("titleid", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CRUDtblRegistation_Result>("usp_CRUDtblRegistation", registrationIDParameter, userTypeIDParameter, countryIDParameter, stateIDParameter, firstNameParameter, lastNameParameter, emailIDParameter, passwordParameter, addressParameter, cityidParameter, pincodeParameter, profilePictureParameter, emailConfirmedParameter, phoneNumberParameter, userNameParameter, userIDParameter, middlenameParameter, titleidParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_CRUDUserImgSave_Result> usp_CRUDUserImgSave(Nullable<int> registrationID, string profilePicture, Nullable<int> mode)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("profilePicture", profilePicture) :
                new ObjectParameter("profilePicture", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CRUDUserImgSave_Result>("usp_CRUDUserImgSave", registrationIDParameter, profilePictureParameter, modeParameter);
        }
    
        public virtual int usp_CURDUserProfile(Nullable<int> registrationID, Nullable<int> userTypeID, Nullable<int> countryID, Nullable<int> stateID, string firstName, string emailID, string address, string city, string pincode, Nullable<int> userID, Nullable<int> mode)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("userTypeID", userTypeID) :
                new ObjectParameter("userTypeID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("emailID", emailID) :
                new ObjectParameter("emailID", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CURDUserProfile", registrationIDParameter, userTypeIDParameter, countryIDParameter, stateIDParameter, firstNameParameter, emailIDParameter, addressParameter, cityParameter, pincodeParameter, userIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_emergency_Result> usp_emergency(Nullable<int> categoryID, Nullable<int> mode)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_emergency_Result>("usp_emergency", categoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_getApprovalCount_Result> usp_getApprovalCount(Nullable<int> mode)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getApprovalCount_Result>("usp_getApprovalCount", modeParameter);
        }
    
        public virtual ObjectResult<usp_getApprovalData_Result> usp_getApprovalData(Nullable<int> mode)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getApprovalData_Result>("usp_getApprovalData", modeParameter);
        }
    
        public virtual ObjectResult<usp_getCategory_Result> usp_getCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getCategory_Result>("usp_getCategory");
        }
    
        public virtual ObjectResult<usp_getCountryNames_Result> usp_getCountryNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getCountryNames_Result>("usp_getCountryNames");
        }
    
        public virtual ObjectResult<usp_GetEmailConfirm_Result> usp_GetEmailConfirm(Nullable<int> registrationID)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmailConfirm_Result>("usp_GetEmailConfirm", registrationIDParameter);
        }
    
        public virtual ObjectResult<usp_getEventsData_Result> usp_getEventsData(Nullable<int> eventID, Nullable<int> categoryID, Nullable<int> mode)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getEventsData_Result>("usp_getEventsData", eventIDParameter, categoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_getFilterEvents_Result> usp_getFilterEvents(Nullable<int> categoryID, Nullable<int> mode)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getFilterEvents_Result>("usp_getFilterEvents", categoryIDParameter, modeParameter);
        }
    
        public virtual int usp_getFundraisingdata(Nullable<int> fundRaisingID, Nullable<int> categoryID, Nullable<int> mode)
        {
            var fundRaisingIDParameter = fundRaisingID.HasValue ?
                new ObjectParameter("FundRaisingID", fundRaisingID) :
                new ObjectParameter("FundRaisingID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getFundraisingdata", fundRaisingIDParameter, categoryIDParameter, modeParameter);
        }
    
        public virtual int usp_getFundraisingEventsData(Nullable<int> mode)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getFundraisingEventsData", modeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getHappyPeopleCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getHappyPeopleCount");
        }
    
        public virtual ObjectResult<usp_GetRecordsByEventIDOrFundraiserName_Result> usp_GetRecordsByEventIDOrFundraiserName(Nullable<int> eventID, string organiserName, Nullable<int> categoryID, Nullable<int> mode)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var organiserNameParameter = organiserName != null ?
                new ObjectParameter("OrganiserName", organiserName) :
                new ObjectParameter("OrganiserName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecordsByEventIDOrFundraiserName_Result>("usp_GetRecordsByEventIDOrFundraiserName", eventIDParameter, organiserNameParameter, categoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_getTestimonialdata_Result> usp_getTestimonialdata()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getTestimonialdata_Result>("usp_getTestimonialdata");
        }
    
        public virtual ObjectResult<usp_getTitleNames_Result> usp_getTitleNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getTitleNames_Result>("usp_getTitleNames");
        }
    
        public virtual ObjectResult<usp_getUserDetails_Result> usp_getUserDetails(Nullable<int> registrationID, Nullable<int> mode)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getUserDetails_Result>("usp_getUserDetails", registrationIDParameter, modeParameter);
        }
    
        public virtual int usp_getUsersData(Nullable<int> registrationID)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getUsersData", registrationIDParameter);
        }
    
        public virtual ObjectResult<usp_insertFeedback_Result> usp_insertFeedback(Nullable<int> feedbackID, Nullable<int> feedbackReasonID, string userFeedback, Nullable<int> rating, Nullable<int> mode)
        {
            var feedbackIDParameter = feedbackID.HasValue ?
                new ObjectParameter("feedbackID", feedbackID) :
                new ObjectParameter("feedbackID", typeof(int));
    
            var feedbackReasonIDParameter = feedbackReasonID.HasValue ?
                new ObjectParameter("feedbackReasonID", feedbackReasonID) :
                new ObjectParameter("feedbackReasonID", typeof(int));
    
            var userFeedbackParameter = userFeedback != null ?
                new ObjectParameter("userFeedback", userFeedback) :
                new ObjectParameter("userFeedback", typeof(string));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_insertFeedback_Result>("usp_insertFeedback", feedbackIDParameter, feedbackReasonIDParameter, userFeedbackParameter, ratingParameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_InserttblTestimonial_Result> usp_InserttblTestimonial(Nullable<int> testimonialID, Nullable<int> registrationID, string testimonial, Nullable<int> mode)
        {
            var testimonialIDParameter = testimonialID.HasValue ?
                new ObjectParameter("TestimonialID", testimonialID) :
                new ObjectParameter("TestimonialID", typeof(int));
    
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("registrationID", registrationID) :
                new ObjectParameter("registrationID", typeof(int));
    
            var testimonialParameter = testimonial != null ?
                new ObjectParameter("Testimonial", testimonial) :
                new ObjectParameter("Testimonial", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_InserttblTestimonial_Result>("usp_InserttblTestimonial", testimonialIDParameter, registrationIDParameter, testimonialParameter, modeParameter);
        }
    
        public virtual ObjectResult<string> usp_RandomPassword(string emailID)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("emailID", emailID) :
                new ObjectParameter("emailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_RandomPassword", emailIDParameter);
        }
    
        public virtual ObjectResult<usp_tblEmailTemplateSave_Result> usp_tblEmailTemplateSave(Nullable<int> registrationId, string templateName, string templateSubject, string templateBody, Nullable<int> mode)
        {
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("registrationId", registrationId) :
                new ObjectParameter("registrationId", typeof(int));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("templateName", templateName) :
                new ObjectParameter("templateName", typeof(string));
    
            var templateSubjectParameter = templateSubject != null ?
                new ObjectParameter("templateSubject", templateSubject) :
                new ObjectParameter("templateSubject", typeof(string));
    
            var templateBodyParameter = templateBody != null ?
                new ObjectParameter("templateBody", templateBody) :
                new ObjectParameter("templateBody", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblEmailTemplateSave_Result>("usp_tblEmailTemplateSave", registrationIdParameter, templateNameParameter, templateSubjectParameter, templateBodyParameter, modeParameter);
        }
    
        public virtual int usp_tblSubscribe(Nullable<int> registrationId, string feedback)
        {
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("registrationId", registrationId) :
                new ObjectParameter("registrationId", typeof(int));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("feedback", feedback) :
                new ObjectParameter("feedback", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSubscribe", registrationIdParameter, feedbackParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_ValidateMemberWithPassword(string emailID, string passWord, ObjectParameter outputCount)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("emailID", emailID) :
                new ObjectParameter("emailID", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_ValidateMemberWithPassword", emailIDParameter, passWordParameter, outputCount);
        }
    }
}
